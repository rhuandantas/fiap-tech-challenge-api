package server

import (
	"context"
	"fiap-tech-challenge-api/internal/server/handlers"
	"fmt"
	"github.com/joomcode/errorx"
	"github.com/labstack/echo/v4"
	"github.com/labstack/echo/v4/middleware"
	"github.com/labstack/gommon/log"
	echoSwagger "github.com/swaggo/echo-swagger"
	_ "github.com/swaggo/echo-swagger/example/docs" // docs is generated by Swag CLI, you have to import it.
)

type HttpServer struct {
	appName       *string
	host          string
	Server        *echo.Echo
	healthHandler *handlers.HealthCheck
}

// NewAPIServer creates the main server with all configurations necessary
func NewAPIServer(healthHandler *handlers.HealthCheck) *HttpServer {
	host := "127.0.0.1:3000"
	appName := "tech-challenge-api"
	app := echo.New()

	app.HideBanner = true
	app.HidePort = true

	app.Pre(middleware.RemoveTrailingSlash())
	app.Use(middleware.GzipWithConfig(middleware.GzipConfig{Level: 5}))
	app.Use(middleware.Recover())
	app.Use(middleware.CORS())

	app.GET("/swagger/*", echoSwagger.WrapHandler)

	return &HttpServer{
		appName: &appName,
		host:    host,
		Server:  app,
	}
}

func (hs *HttpServer) RegisterHandlers() {
	hs.healthHandler.RegisterHealth(hs.Server)
}

// Start starts an application on specific port
func (hs *HttpServer) Start() {
	hs.RegisterHandlers()
	ctx := context.Background()
	log.Info(ctx, fmt.Sprintf("Starting a server at http://%s", hs.host))
	err := hs.Server.Start(hs.host)
	if err != nil {
		log.Error(ctx, errorx.Decorate(err, "failed to start the server"))
		return
	}
}
