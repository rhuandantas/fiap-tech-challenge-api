// Code generated by MockGen. DO NOT EDIT.
// Source: internal/adapters/repository/produto.go
//
// Generated by this command:
//
//	mockgen -source=internal/adapters/repository/produto.go -package=mock_repo -destination=test/mock/repository/produto.go
//

// Package mock_repo is a generated GoMock package.
package mock_repo

import (
	context "context"
	domain "fiap-tech-challenge-api/internal/core/domain"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockProdutoRepo is a mock of ProdutoRepo interface.
type MockProdutoRepo struct {
	ctrl     *gomock.Controller
	recorder *MockProdutoRepoMockRecorder
}

// MockProdutoRepoMockRecorder is the mock recorder for MockProdutoRepo.
type MockProdutoRepoMockRecorder struct {
	mock *MockProdutoRepo
}

// NewMockProdutoRepo creates a new mock instance.
func NewMockProdutoRepo(ctrl *gomock.Controller) *MockProdutoRepo {
	mock := &MockProdutoRepo{ctrl: ctrl}
	mock.recorder = &MockProdutoRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProdutoRepo) EXPECT() *MockProdutoRepoMockRecorder {
	return m.recorder
}

// Apaga mocks base method.
func (m *MockProdutoRepo) Apaga(ctx context.Context, produto *domain.Produto) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Apaga", ctx, produto)
	ret0, _ := ret[0].(error)
	return ret0
}

// Apaga indicates an expected call of Apaga.
func (mr *MockProdutoRepoMockRecorder) Apaga(ctx, produto any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Apaga", reflect.TypeOf((*MockProdutoRepo)(nil).Apaga), ctx, produto)
}

// Atualiza mocks base method.
func (m *MockProdutoRepo) Atualiza(ctx context.Context, produto *domain.Produto, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Atualiza", ctx, produto, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Atualiza indicates an expected call of Atualiza.
func (mr *MockProdutoRepoMockRecorder) Atualiza(ctx, produto, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Atualiza", reflect.TypeOf((*MockProdutoRepo)(nil).Atualiza), ctx, produto, id)
}

// Insere mocks base method.
func (m *MockProdutoRepo) Insere(ctx context.Context, produto *domain.Produto) (*domain.Produto, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insere", ctx, produto)
	ret0, _ := ret[0].(*domain.Produto)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insere indicates an expected call of Insere.
func (mr *MockProdutoRepoMockRecorder) Insere(ctx, produto any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insere", reflect.TypeOf((*MockProdutoRepo)(nil).Insere), ctx, produto)
}

// PesquisaPorCategoria mocks base method.
func (m *MockProdutoRepo) PesquisaPorCategoria(ctx context.Context, produto *domain.Produto) ([]*domain.Produto, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PesquisaPorCategoria", ctx, produto)
	ret0, _ := ret[0].([]*domain.Produto)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PesquisaPorCategoria indicates an expected call of PesquisaPorCategoria.
func (mr *MockProdutoRepoMockRecorder) PesquisaPorCategoria(ctx, produto any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PesquisaPorCategoria", reflect.TypeOf((*MockProdutoRepo)(nil).PesquisaPorCategoria), ctx, produto)
}

// PesquisaPorID mocks base method.
func (m *MockProdutoRepo) PesquisaPorID(ctx context.Context, produto *domain.Produto) (*domain.Produto, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PesquisaPorID", ctx, produto)
	ret0, _ := ret[0].(*domain.Produto)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PesquisaPorID indicates an expected call of PesquisaPorID.
func (mr *MockProdutoRepoMockRecorder) PesquisaPorID(ctx, produto any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PesquisaPorID", reflect.TypeOf((*MockProdutoRepo)(nil).PesquisaPorID), ctx, produto)
}

// PesquisaPorIDS mocks base method.
func (m *MockProdutoRepo) PesquisaPorIDS(ctx context.Context, ids []int64) ([]*domain.Produto, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PesquisaPorIDS", ctx, ids)
	ret0, _ := ret[0].([]*domain.Produto)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PesquisaPorIDS indicates an expected call of PesquisaPorIDS.
func (mr *MockProdutoRepoMockRecorder) PesquisaPorIDS(ctx, ids any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PesquisaPorIDS", reflect.TypeOf((*MockProdutoRepo)(nil).PesquisaPorIDS), ctx, ids)
}
