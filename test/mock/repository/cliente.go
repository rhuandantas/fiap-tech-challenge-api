// Code generated by MockGen. DO NOT EDIT.
// Source: internal/adapters/repository/cliente.go
//
// Generated by this command:
//
//	mockgen -source=internal/adapters/repository/cliente.go -package=mock_repo -destination=test/mock/repository/cliente.go
//

// Package mock_repo is a generated GoMock package.
package mock_repo

import (
	context "context"
	domain "fiap-tech-challenge-api/internal/core/domain"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockClienteRepo is a mock of ClienteRepo interface.
type MockClienteRepo struct {
	ctrl     *gomock.Controller
	recorder *MockClienteRepoMockRecorder
}

// MockClienteRepoMockRecorder is the mock recorder for MockClienteRepo.
type MockClienteRepoMockRecorder struct {
	mock *MockClienteRepo
}

// NewMockClienteRepo creates a new mock instance.
func NewMockClienteRepo(ctrl *gomock.Controller) *MockClienteRepo {
	mock := &MockClienteRepo{ctrl: ctrl}
	mock.recorder = &MockClienteRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClienteRepo) EXPECT() *MockClienteRepoMockRecorder {
	return m.recorder
}

// Anonimizar mocks base method.
func (m *MockClienteRepo) Anonimizar(ctx context.Context, cliente *domain.Cliente) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Anonimizar", ctx, cliente)
	ret0, _ := ret[0].(error)
	return ret0
}

// Anonimizar indicates an expected call of Anonimizar.
func (mr *MockClienteRepoMockRecorder) Anonimizar(ctx, cliente any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Anonimizar", reflect.TypeOf((*MockClienteRepo)(nil).Anonimizar), ctx, cliente)
}

// Insere mocks base method.
func (m *MockClienteRepo) Insere(ctx context.Context, cliente *domain.Cliente) (*domain.Cliente, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insere", ctx, cliente)
	ret0, _ := ret[0].(*domain.Cliente)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Insere indicates an expected call of Insere.
func (mr *MockClienteRepoMockRecorder) Insere(ctx, cliente any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insere", reflect.TypeOf((*MockClienteRepo)(nil).Insere), ctx, cliente)
}

// PesquisaPorCPF mocks base method.
func (m *MockClienteRepo) PesquisaPorCPF(ctx context.Context, cliente *domain.Cliente) (*domain.Cliente, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PesquisaPorCPF", ctx, cliente)
	ret0, _ := ret[0].(*domain.Cliente)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PesquisaPorCPF indicates an expected call of PesquisaPorCPF.
func (mr *MockClienteRepoMockRecorder) PesquisaPorCPF(ctx, cliente any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PesquisaPorCPF", reflect.TypeOf((*MockClienteRepo)(nil).PesquisaPorCPF), ctx, cliente)
}

// PesquisaPorId mocks base method.
func (m *MockClienteRepo) PesquisaPorId(ctx context.Context, id int64) (*domain.Cliente, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PesquisaPorId", ctx, id)
	ret0, _ := ret[0].(*domain.Cliente)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PesquisaPorId indicates an expected call of PesquisaPorId.
func (mr *MockClienteRepoMockRecorder) PesquisaPorId(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PesquisaPorId", reflect.TypeOf((*MockClienteRepo)(nil).PesquisaPorId), ctx, id)
}
